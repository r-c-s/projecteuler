/*
#------------------------------------------------------------------------------
# PROJECT EULER
# PROBLEM 29
#------------------------------------------------------------------------------
# Consider all integer combinations of ab for 2 <= a <= 5 and 2 <= b <= 5:
#
# 2^2=4, 2^3=8, 2^4=16, 2^5=32
# 3^2=9, 3^3=27, 3^4=81, 3^5=243
# 4^2=16, 4^3=64, 4^4=256, 4^5=1024
# 5^2=25, 5^3=125, 5^4=625, 5^5=3125
# If they are then placed in numerical order, with any repeats removed, 
# we get the following sequence of 15 distinct terms:
#
# 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
#
# How many distinct terms are in the sequence generated by a^b for 
# 2 <= a <= 100 and 2 <= b <= 100?
#------------------------------------------------------------------------------
# SOLUTION: 9183
#------------------------------------------------------------------------------
*/

#include <iostream>
#include <sstream>
using namespace std;

string power(int, int);
string mul(string, string);
string intToString(int);
bool alreadyIn(string[], int);

const int N = 9801;
string nums[N];

int main(){
    int h = 0;
    for (int i = 2; i <= 100; i++){
        for (int j = 2; j <= 100; j++){
            nums[h] = power(i, j);
            if (!alreadyIn(nums, h)) h++;
        }
    }
    cout << h << endl;
}

bool alreadyIn(string a[], int n){
    string target = a[n];
    for (int i = 0; i < n; i++){
        if (a[i] == target) return true;
    }
    return false;
}

string power(int a, int e){
    string aString = intToString(a);
    if (e == 0) return "1";
    if (e == 1) return aString;
    string total = aString;
    for (int i = 1; i < e; i++){
        total = mul(total, aString);
    }
    return total;
}

string mul(string a, string b){
    string nums[2] = {a, b};
    string sum = "";

    const int sLen = a.length() + b.length() - 1;

    unsigned int s[sLen];
    for (int i = 0; i < sLen; i++){
        s[i] = 0;
    }

    for (int j = a.length() - 1; j >= 0; j--){
        for(int i = b.length() - 1; i >= 0; i--){
            char aChar = nums[0][j];
            char bChar = nums[1][i];
            int aInt = aChar - '0';
            int bInt = bChar - '0';
            s[i+j] += aInt * bInt;
        }
    }

    for (int i = sLen-1; i-1 >= 0 ; i--){
        s[i-1] += s[i] / 10;
        s[i] %= 10;
    }

    for (int i = 0; i < sLen; i++){
        if(s[i] != 0){
            for (int j = i; j < sLen; j++){
                stringstream ss;
                ss << s[j];
                sum += ss.str();
            }
            break;
        }
    }
    return sum;
}

string intToString(int a){
    ostringstream out;
    out << a;
    return out.str();
}
