#------------------------------------------------------------------------------
# PROJECT EULER
# PROBLEM 8
#------------------------------------------------------------------------------
#Find the greatest product of five consecutive digits in the 1000-digit number.
#------------------------------------------------------------------------------
# SOLUTION: 40824
#------------------------------------------------------------------------------
# as -32 8.s -o 8.o
# gcc -m32 8.o -o 8
#------------------------------------------------------------------------------

data:
    .string "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"

dec32_format:
    .string "%d\n"

.section .text
.globl main

main:
    call    find_grtst_prod
    pushl   %eax
    call    print32

#------------------------------------------------------------------------------
main_exit:
    xor     %eax, %eax
    incl    %eax
    xor     %ebx, %ebx
    int     $0x80

#------------------------------------------------------------------------------
.type print32, @ function

print32:
    pushl   4(%esp)
    pushl   $dec32_format
    call    printf
    addl    $8, %esp
    ret

#------------------------------------------------------------------------------
.type find_grtst_prod, @ function

find_grtst_prod:
    xor     %edi, %edi
    xor     %ecx, %ecx      # largest
    movl    $-1, %edi

fgp_main_loop:
    incl    %edi
    cmpl    $1000-4, %edi
    je      fgp_exit
    xor     %edx, %edx

fgp_inner_loop:
    cmpl    $5, %edx    
    je      fgp_multiply
    pushl   %edx
    addl    %edi, %edx
    movzx   data(,%edx,1), %ebx
    addl    $-48, %ebx
    popl    %edx            # push 5 items
    pushl   %ebx
    incl    %edx
    jmp     fgp_inner_loop

fgp_multiply:
    popl    %eax
    popl    %ebx
    mul     %ebx            # eax = a*b
    popl    %ebx
    mul     %ebx            # eax = a*b*c
    popl    %ebx
    mul     %ebx            # eax = a*b*c*d
    popl    %ebx
    mul     %ebx            # eax = a*b*c*d*e
    cmpl    %ecx, %eax    
    jle     fgp_main_loop
    movl    %eax, %ecx      # largest = eax
    jmp     fgp_main_loop

fgp_exit:
    movl   %ecx, %eax
    ret
